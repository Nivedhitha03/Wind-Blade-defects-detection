from PIL import Image
import numpy as np
import sys
import os
import csv
from numpy import loadtxt
from keras.models import Sequential
from keras.layers import Dense
import pandas
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

# default format can be changed as needed
def createFileList(myDir, format='.jpg'):
    fileList = []
    print(myDir)
    for root, dirs, files in os.walk(myDir, topdown=False):
        for name in files:
            if name.endswith(format):
                fullName = os.path.join(root, name)
                fileList.append(fullName)
    return fileList
# load the original image
myFileList = createFileList('/content/drive/MyDrive/Blade patches')

for file in myFileList:
    print(file)
    img_file = Image.open(file)
    # img_file.show()

    # get original image parameters...
    width, height = img_file.size
    format = img_file.format
    mode = img_file.mode

    # Make image Greyscale
    img_grey = img_file.convert('L')
    #img_grey.save('result.png')
    img_grey.show()

    # Save Greyscale values
    value = np.asarray(img_grey.getdata(), dtype=np.int).reshape((img_grey.size[1], img_grey.size[0]))
    value = value.flatten()
    print(value)
    with open("Blade_Patches.csv", 'a') as f:
        writer = csv.writer(f)
        writer.writerow(value)

with open("Blade_Patches.csv", newline='') as csvfile:
  reader = csv.DictReader(csvfile)
  for row in reader:
    print(row)
    
    
# load the dataset
df = pandas.read_csv("/content/drive/MyDrive/musicnet_metadata.csv", delimiter=',')
print ("1")
# split into input (X) and output (y) variables
X = df.iloc[:1000,:]
y = df.iloc[1001:,:]
#X = dataset[:,0:8]
#y = dataset[:,8]
print ("2")
# define the keras model
model = keras.Sequential()
print ("5")
'''
model.add(Dense(12, input_dim=8, activation='relu'))
model.add(Dense(8, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
'''
model.add(layers.Dense(2, activation="relu"))
model.add(layers.Dense(3, activation="relu"))
model.add(layers.Dense(4))
print ("3")
# compile the keras model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
print ("4")
# fit the keras model on the dataset
model.fit(X,y)
print ("6")
# evaluate the keras model
accuracy = model.evaluate(X, y)
print('Accuracy: %.2f' % (accuracy*100))
print ("7")
